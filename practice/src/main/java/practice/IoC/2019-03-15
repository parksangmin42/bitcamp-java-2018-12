# 이니셜라이져에서 팩토리 객체를 만들어 주는 코드와 프록시 팩토리 만드는 코드를 잘라내고 config에 저장
- 모든 객체생성하는 것을 IoC 컨테이너(APpConfig)에서 만들어지도록 코드를 변경한다.
- 애노테이션을 지정해 객체를 생성해주는 메서드에 애노테이션을 붙여 IoC 컨테이너가 이 애노테이션이 붙은 메서드를
호출하고 리턴받아 생성된 객체를 저장한다.

# ApplicationContext 클래스 변경
- IoC컨테이너 설정 정보를 가지고 있는 클래스의 인스턴스를 생성하고 @Bean 애노테이션이 붙은 메서드를 모두 찾고
저장소에 보관한다. 저장소에서 메서드를 호출해서 리턴받은 값을 빈컨테이너에 저장한다.
- !!!!!!!!!!!!!!!!! 만약 boardDao(DaoFactory):BoarDao 를 호출했다고 가정하면 이 객체를 생성하기 위해서는 
DaoFactory를 먼저 생성해야 한다.
daoFactory(SqlSessionFactoryProxy):DaoFactory로 이동하면 또 다시 SqlSessionFactoryProxy가 필요하다.
SqlSessionFactoryProxy():SqlSessionFactoryProxy는 아규먼트 값이 필요없으니 생성하고 그 후 daoFactory 생성
그런 다음에 boardDao를 생성한다.
생성한 다음엔 이미 생성된 객체에 대해서는 저장소에서 지워준다.


    1) "m" 메서드에서 호출할 때 사용할 파라미터 정보를 알아낸다.
    2) 빈컨테이너에서 파라미터에 해당하는 값을 꺼낸다.
    3) 만약 빈 컨테이너에 파라미터에 해당하는 값이 없다면,
       팩토리 메서드를 뒤져서 그 타입의 값을 리턴하는 메서드를 찾아 호출한다.
    4) 만약 해당 파라미터 타입의 값을 만들어 주는 다른 팩토리 메서드가 없다면,
      factoryMethod 메서드 호출을 포기한다.

### 수업 후 정리
- 기존의 코드에서는 ApplicationInitializer에서 factoryProxy, txManager, daoFactory 등 ..객체 생성을 준비하고
관리하며 ServerApp에 넘겨줬다. 기존 코드에서는 생성에 필요한 상위 객체들을 순서대로 나열해서 코드를 작성하였기 때문에 
만약 이 코드의 순서가 변경되었을 경우 해당 객체의 생성이 불가능 하다.
 오늘 변경된 코드는 객체를 생성하는 코드(SqlSessionFactoryProxy, TransactionManager, DaoFactory, DaoXxx 등..)을
AppConfig 클래스를 만들어 메서드로 따로 관리한다. 이 클래스는 해당 객체의 메서드를 호출하면 new를 사용해 객체를 생성하고 
그대로 리턴하는 역할을 한다.

 ApplicationInitializer에서 객체를 생성하고 보관하는 코드는 모두 지워버리고 ApplicationContext에 객체생성 메서드를 
관리하는 AppConfig를 주입해준다. [ApplicationContext appCtx = new ApplicationContext(AppConfig.class);]

 ApplicationContext에서 메서드 관리하는 AppConfig를 생성자로부터 받고 AppConfig 정보를 가지고 인스턴스를 생성한다. 
그 후 해당 인스턴스(AppConfig)에 Bean이라는 애노테이션이 붙은 메서드를 모두 찾고 리스트에 저장한다. 
저장한 저장소에서 목록을 하나씩 꺼내 해당 메서드를 호출하고 결과값을 저장한다.
여기서 메서드를 호출하고 결과를 저장하는 메서드가(callFactoryMethod)이다.

## callFactoryMethod 
- 생성자에서 호출 파라미터 값으로 config(생성 정보를 가지고 있는 클래스 객체), m(객체에서 꺼낸 [0]번째 메서드), 
factoryMethods(애노테이션이 붙은 메서드들의 저장소)를 준다.
config = obj, m = factoryMethod, factoryMethods = factoryMethods 로 받는다.

 하나의 메서드에서 파라미터 타입을 추출 paramTypes에 저장한다.
추출한 파라미터의 값을 담을 Object의 배열을 paramTypes의 크기로 생성한다.
반복문을 통해 추출한 파라미터 값(타입)을 findBean 메서드 실행

** findBean
 * 객체가 들어있는 빈컨테이너에 있는 값들을 전부 꺼내 파라미터로 받은 타입과 해당 객체의 값이 맞는지 확인후 맞으면 객체 리턴
 
메서드 실행후 추출한 값을 paramValue에 넣고 paramValue가 널이 아니면 미리 생성해둔 파라미터 타입을 저장하는 배열 paramValues에
저장하고 다시 반복문으로 돌아간다.

 만약 빈 컨테이너에서 해당 타입으로 맞는 객체를 찾을 수 없다면 팩토리 메서드를 뒤져서 해당 타입의 값을 리턴하는 메서드를 찾아 호출한다.
메서드 클래스 인스턴스를 하나 만들고 메서드를 보관하는 factoryMethods와 paramTypes[i]를 파라미터 값으로 주입한다.

- 팩토리 메서드 전체를 뒤져서 파라미터 값으로 받은 타입의 값을 리턴하는 메서드를 찾아 호출하는 메서드 -        
          private Method findMethodByReturnType(
      List<Method> methods, Class<?> returnType) {
    for (Method m : methods) {
      if (m.getReturnType() == returnType) {
        return m;
      }
    }
    return null;
  }
        
이렇게 메서드를 실행했는데도 해당 파라미터 타입의 값을 만들어 주는 메서드가 존재하지 않다면 호출을 포기하고 null을 리턴한다.

 해당 메서드를 찾고 리턴 받았다면 paramValue 값에 allFactoryMethod를 재귀호출하여 다시 해당 값으로 메서드를 실행하고
해당 값들이 있다면 리스트 목록에서 삭제 후 해당 값을 가지고 팩토리 메서드를 호출 그리고 팩토리 메서드가 생성한 객체를 빈컨테이너에 보관한다.
    (이때 재귀호출시 obj(config) otherFactoryMethod. factoryMethod, factoryMethods 값을 넘겨준다.
    파라미터 값을 넘겨주는 메서드를 찾긴 했지만 그 메서드를 호출하기 위해 파라미터 값이 필요한데 그 파라미터 값이 없어서
    호출에 실해했다면 factoryMethod 호출을 포기한다.
    파라미터 값이 준비되었다면 paramValues[i] = paramValue; 저장한다.
해당 생성 객체를 보관할 때 애노테이션의 빈의 이름이 지정되어있다면 그 지정된 이름을 사용하고 없다면 메서드 이름을 사용한다.
그 후 팩토리 메서드가 생성한 객체를 리턴한다.!
        
        
# 오후 수업
- 기존에 작성한 Context 클래스파일 삭제 Spring IoC로 변경
- Spring과 Mybatis 연동 (마찬가지로 메이븐에서 Mybatis Spring 검색 후 다운로드)
        
        
        
        
        
        
        
        
