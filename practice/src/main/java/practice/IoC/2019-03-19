### 배열에 값 설정하기

## 배열에 프로퍼티 값 설정하기
property name에 어떤 객체를 사용할지 지정해준다.[ <property name="tires">]
<array> 태그를 사용해서 class를 지정해주고 p스키마 등록한걸 사용해서 값을 넣어준다.

<array>
        <bean class="ch29.e.Tire" 
              p:maker="비트타이어" p:width="215" p:ratio="65" p:wheel="15"/>
        <ref bean="spareTire"/>
        
이런식으로 배열의 값을 지정해줄 수 있고 여러개 담을 수 있다. 값을 넣을 때 기존 객체를 지정해 ref로 넣을 수 있다.
<array> 태그 이외에도 <list> 엘리먼트도 사용할 수 있다.  

## map 프로퍼티 값 설정

<property name="options">
      <map>
        <entry>
          <key>
            <value>sunroof</value>
          </key>
          <value>yes</value>
        </entry>
        <entry key="front-airbag">
          <value>yes</value>
        </entry>
        <entry key="rear-airbag" value="no"/>
        <entry key="blackbox">
          <bean class="ch29.e.BlackBox" p:maker="비트오토" p:model="모두기록1"/>
        </entry>
      </map>
    </property>

맵을 사용할 때는 map엘리먼트 안에 entry -> key -> value 값 설정해 키값과 벨류값 모두 설정할 수 있다.
또한 키값을 주고 벨류값으로 객체 생성 프로퍼티를 설정할 수 있다.

## Properties 프로퍼티 값 설정하기
<props>
        <prop key="width">215</prop>
</props>
엘리먼트를 이용하여 키값에 해당하는 벨류값을 설정할 수 있다.

-----------------------------------------------------------------------------------------------------------------------------------

### 팩토리 클래스를 사용하여 객체를 생성

## 팩토리 클래스를 이용하여 객체를 생성 
class          : 팩토리 클래스 이름
factory-method : 호출될 스태틱 메서드 이름
id             : 팩토리 메서드가 리턴한 값을 저장할 때 사용할 객체 이름
[주의! : id로 지정되는 객체는 팩토리 클래스의 객체가 아니라 팩토리 메서드가 리턴한 값을 저장하는 것이다.]
ㄴ xml 코드 [ <bean id="c1" class="ch29.f.CarFactory" factory-method="create">]

## 팩토리 클래스를 사용하여 객체를 생성 II
팩토리 클래스의 객체 생성 메서드가 인스턴스라면 팩토리 클래스의 객체를 먼저 만들어야 한다.
factory-bean    : 팩토리 클래스의 인스턴스
factory-method  : 호출될 스태틱 메서드 이름
id              : 팩토리 메서드가 리턴한 값을 저장할 때 사용할 객체 이름
[주의! : id로 지정되는 객체는 팩토리 클래스의 객체가 아니라 팩토리 메서드가 리턴한 값을 저장하는 것이다.]

## 팩토리 클래스를 사용하여 객체를 생성 III
IoC컨테이너 클래스 생성 규칙(FactoryBean)에 따라서 객체 생성하기
class : 팩토리 클래스의 이름
id    : 팩토리 객체의 getObject()가 리턴한 값을 저장할 때 사용할 이름
[주의!  :   factory-method 가 없다고 해서 팩토리 클래스의 객체가 저장되는 것이 아니다. 리턴값이 저장.]

## 객체 생성 원리
1. IoC 컨테이너는 class 속성에 지정된 클래스를 조사한다.
2. 만약 일반 클래스라면 그대로 객체를 생성해 id 값으로 저장한다.
3. 만약 FactoryBean 규칙에 따라 만든 클래스라면 해당 클래스의 객체를 생성 IoC 컨테이너에 대해 getBean()을 호출하면
그 공장 객체에 대해 getObject()를 호출한다. 그리고 getObject()의 리턴 값을 id에 지정한 이름으로 저장 후 객체 리턴
한 번 객체를 생성하면 getBean()을 호출할 때 마다 기존에 생성했던 객체를 리턴한다.
공장 클래스의 isSingleton() 리턴 값이 true 인 경우에 이렇게 동작한다.

<bean id="c1" class="ch29.f.CarFactoryBean">
    <constructor-arg ref="blackBox"/>
    <constructor-arg value="sonata"/>
</bean>

-----------------------------------------------------------------------------------------------------------------------------------

### 프로퍼티 타입 변환하기

## XML에서 프로퍼티 값으로 지정한 것은 Strig 타입이다. 이것을 프로퍼티의 타입으로 변환하여 새터를 호출한다.
단! 스프링 IoC 컨테이너는 자바 원시 타입에 대해서만 자동 변환해준다.

## 원시타입이 아닌 타입을 변환해주려면 개발자가 직접 해당 타입으로 값을 변환해서 주입해줘야 한다.
Date의 경우 class에 java.sql.Date 패키지명을 포함해 써주고 해당 클래스에 사용할 메서드를 지정한다.
factory-method="valueOf => 이렇게 지정하고 <constructor-arg value="2019-3-19"/> 값을 변경해
개발자가 수작업으로 변환 해줘야 한다.

## 스프링 IoC 컨테이너에서 제공해주는 프로퍼티 에디터가 존재한다.

<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <!-- 프로퍼티 에디터 지정하기
             key : String을 바꿀 목표 타입
             value : key에 지정한 타입으로 바꿀 때 사용할 프로퍼티 에디터  -->
        <entry key="java.util.Date" value="ch29.g.MyCustomDateEditor"/>
      </map>
    </property>
</bean>  

이렇게 지정해주고 변환해야 할 타입이 많은경우 entry 태그를 사용해 추가해 주면 변환없이 그대로 값을 입력할 수 있다.
여기서 제공해주는 에디터를 사용자에 맞게 재정의 해줘야 하는데 인터페이스를 구현할 경우 해당 메서드를 전부 재정의 
해야 하는 번거로움이 존재한다. 하지만 직접 규칙을 정의하지말고 해당 인터페이스를 미리 구현한 클래스가 있다면
그 클래스를 상속받고 변경할 메서드만 오버로딩 한 다음 해당 메서드만 사용자에 맞게 재정의 해주면 된다.

-----------------------------------------------------------------------------------------------------------------------------------

### 스프링 IoC 컨테이너의 옵저버 패턴 적용한 클래스 (BeanPostProcessor, @Autowired 사용법)

## 스프링 IoC 컨테이너의 객체 생성 완료를 보고받고 싶다면 BeanProcessor 규칙에 따라 클래스 정의 후 
IoC 컨테이너에 등록하라 (XML에 등록) :  <bean class="ch29.h.MyBeanPostProcessor"/>

## @Autowired 사용법
@Autowired 애노테이션은 생성된 객체에서 @Autowired가 붙은 세터를 찾고 있다면 해당 세터를 호출하여 의존객체를 주입
의존객체가 없다면 그 의존객체가 생성될 때까지 별도로 보관하고 있다가 생성되는 순간 즉시 그 객체의 세터를 호출하고 주입한다.

## @Autowired 애노테이션을 처리하는 클래스에대해 세부적이게 알아보자




























